"""ORM model for persistent memory entries.

The ``Memory`` table persists arbitrary state generated by OriginFlow's
AI agents and users, including conversation logs, design snapshots,
templates and other multiâ€‘domain artefacts.  Each entry is scoped to a
tenant and optionally a project so that different clients or designs can
be isolated.  The ``kind`` field records what type of memory is stored
(e.g. ``conversation``, ``design``, ``template``) and enables
filtering.  Optional metadata such as ``tags``, ``trace_id``,
``sha256`` and ``prev_sha256`` support integrity checking and richer
queries.  When adding or modifying fields here, also update the
corresponding Pydantic schema in ``backend/schemas/memory.py`` and
frontend type definitions to keep the platform aligned:contentReference[oaicite:3]{index=3}.
"""
from __future__ import annotations

from datetime import datetime
from sqlalchemy import String, DateTime, JSON, Integer, func
from sqlalchemy.orm import Mapped, mapped_column

from backend.models import Base


class Memory(Base):
    """Persistent user memory entry.

    Memory records store arbitrary state generated by the system. Each
    entry is associated with a ``tenant_id`` and optionally a
    ``project_id``. The ``kind`` column records what type of memory
    this is (e.g. "conversation", "design", "template") and can be
    used to filter query results. ``tags`` is a JSON column for
    arbitrary metadata such as component type, status or user supplied
    labels.

    Two hash columns (``sha256`` and ``prev_sha256``) support
    tamperâ€‘evident linked lists of records when required. These values
    are optional and can be computed by higher level services.
    """

    __tablename__ = "memory"

    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    tenant_id: Mapped[str] = mapped_column(String, nullable=False)
    project_id: Mapped[str | None] = mapped_column(String, nullable=True)
    kind: Mapped[str] = mapped_column(String, nullable=False)
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True), server_default=func.now(), nullable=False
    )
    tags: Mapped[dict | None] = mapped_column(JSON, nullable=True)
    trace_id: Mapped[str | None] = mapped_column(String, nullable=True)
    sha256: Mapped[str | None] = mapped_column(String, nullable=True)
    prev_sha256: Mapped[str | None] = mapped_column(String, nullable=True)

    def __repr__(self) -> str:  # pragma: no cover
        return (
            f"Memory(id={self.id}, tenant_id={self.tenant_id}, kind={self.kind}, "
            f"project_id={self.project_id}, created_at={self.created_at})"
        )
